非递归
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //用了一个辅助结点p，这种写法其实可以看作是一个模版，对应的还有中序和后序的模版写法，形式很统一，方便于记忆
    //辅助结点p初始化为根结点，while循环的条件是栈不为空或者辅助结点p不为空，
    //在循环中首先判断如果辅助结点p存在，那么先将p加入栈中，然后将p的结点值加入结果vec中，
    //此时p指向其左子结点。否则如果p不存在的话，表明没有左子结点，我们取出栈顶结点，将p指向栈顶结点的右子结点
    vector<int> preorderTraversal(TreeNode *root) {
        if(root==NULL)
            return {};
        vector<int> vec;
        stack<TreeNode*> sta;
        TreeNode* p=root;
        while(!sta.empty()||p!=NULL){
            if(p!=NULL)
            {
            sta.push(p);
            vec.push_back(p->val);
            p=p->left;
            }
            if(p==NULL)
            {
              TreeNode* t=sta.top();
              sta.pop();
              p=t->right;
            }
        }
        return vec;
    }
};
