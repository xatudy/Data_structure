//给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。
//如果没有给出父节点可能真要中序遍历一次了，但既然给出了就不必那么麻烦了。 
//分两种情况： 
//1. 该节点存在右子节点，则下一个节点是右子树的最左节点。 
//2. 该节点不存在右子节点，则下一个节点是该节点的第一个父子关系为左的祖先节点中的父节点， 因为如果遍历的节点是父节点的右节点说明父节点已遍历过了
struct TreeLinkNode {
int val;
struct TreeLinkNode *left;
struct TreeLinkNode *right;
struct TreeLinkNode *next;
TreeLinkNode(int x) :val(x), left(NULL), right(NULL), next(NULL) {
}
};
class Solution {
public:
    TreeLinkNode* GetNext(TreeLinkNode* pNode){
     if(pNode==NULL)
        return NULL;
     if(pNode->right==NULL)//如果这个节点不存在左子节点 则下个节点是该节点的第一个父子关系为左的祖先的父节点  
        {
              while(pNode && pNode->next && pNode==pNode->next->right)
                       pNode=pNode->next;
                       return pNode->next;
               }

               //如果这个节点存在右子节点  下一个节点是右子树的最左节点
             pNode =pNode->right;
            while(pNode && pNode->left)
                     pNode=pNpde->left;
                     return pNode;
};

