Binary Tree Level Order Traversal 二叉树层序遍历
层序遍历二叉树是典型的广度优先搜索BFS的应用，但是这里稍微复杂一点的是，我们要把各个层的数分开，
存到一个二维向量里面，大体思路还是基本相同的，建立一个queue，然后先把根节点放进去，这时候找根节点的左右两个子节点，
这时候去掉根节点，此时queue里的元素就是下一层的所有节点，用一个for循环遍历它们，然后存到一个一维向量里，
遍历完之后再把这个一维向量存到二维向量里，以此类推，可以完成层序遍历

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
        vector<vector<int>> Vec;
        queue<TreeNode*> qu;
        if(root!=NULL)
          qu.push(root);
        while(!qu.empty()){
            vector<int> vec;
            int size=qu.size();
            for(int i=0;i<size;++i){
                TreeNode* front=qu.front();
                qu.pop();
                vec.push_back(front->val);
                if(front->left)
                {qu.push(front->left);
                }
                if(front->right)
                {qu.push(front->right);
                }
            }
            Vec.push_back(vec);
        }
        return Vec;
    }
};
