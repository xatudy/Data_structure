

enum PointerType //枚举类型  
{  
    THREAD,  //已线索化的  
    LINK    //连接节点，未线索化.  
};  
template<class T>  
struct BinaryTreeNodeThd  
{  
    BinaryTreeNodeThd<T>* _letf;  
    BinaryTreeNodeThd<T>* _right;  
    T _data;  
    PointerType _leftType;  
    PointerType _rightType;  
  
    BinaryTreeNodeThd(const T& x)  
        :_data(x)  
        , _letf(NULL)  
        , _right(NULL)  
        , _leftType(LINK)  
        , _rightType(LINK)  
    {}  
};  
//中序线索化
	void _InOrderThreading(Node* cur,Node* & prev)
	{
		if (cur)
		{
			_InOrderThreading(cur->_letf, prev);
			//如果是空树链，它的线索化_left指向上一个结点，并标记。
			if (cur->_letf == NULL)
			{
				cur->_letf = prev;
				cur->_leftType = THREAD;
			}
			//如果是空树链，上一个结点的线索化_right指向我，并标记。
			if (prev&&prev->_right == NULL)
			{
				prev->_right = cur;
				prev->_rightType = THREAD;
			}
			prev = cur;
			_InOrderThreading(cur->_right, prev);
		}
	}
