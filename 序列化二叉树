两个函数分别实现序列化和反序列化

对于序列化：使用前序遍历，递归的将二叉树的值转化为字符，并且在每次二叉树的结点
不为空时，在转化val所得的字符之后添加一个' ， '作为分割。对于空节点则以 '#' 代替。
 2. 对于反序列化：按照前序顺序，递归的使用字符串中的字符创建一个二叉树(特别注意：
在递归时，递归函数的参数一定要是char **/char* & ，这样才能保证每次递归后指向字符串的指针会
随着递归的进行而移动！！！)

/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
    char* Serialize(TreeNode *root) {    
              if(root==NULL)
                  return  "#";
             string r=to_string(root->val);
              r.push_back(',');
              char* left=Serialize(root->left);
              char* right=Serialize(root->right);
              char* ret=new char[strlen(left)+strlen(right)+r.size()];
              // memcpy(ret,r.c_str(),r.size());  不能用
              strcpy(ret,r.c_str());
       strcat(ret, left);
       strcat(ret, right);
       return ret;
              
    }
    TreeNode* Deserialize(char *str) {
             return deserialize(str);
    }
    TreeNode* deserialize(char* &str)
{ 
     if(*str=='#')
     {str++;
       return NULL;
     }
int num=0;
while(*str!=','&&*str!='\0'){
     num=num*10+(*(str)-'0');
     str++;
}
     str++;
TreeNode* root=new TreeNode(num);
root->left=deserialize(str);
root->right=deserialize(str);
return root;              
}
};
